# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  sam-app

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Parameters:
  Environment:
    Type: String
    Description: Environment
    MinLength: "1"
    MaxLength: "41"
    ConstraintDescription: must contain only alphanumeric characters and _.

Resources:
  ContactsRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${Environment} Contacts API"
      StageName: !Sub "${Environment}"
      Cors:
        AllowMethods: "'POST, GET, PUT, OPTIONS, DELETE'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      Variables:
        ENV: !Sub "${Environment}"
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: swagger.yaml

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-items.js
  listContactsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the ContactsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ContactsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          CONTACTS_TABLE: !Ref ContactsTable

  listContactsApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - listContactsFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ContactsRestApi}/${Environment}/GET/contacts"

  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-by-id.js
  getContactFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the ContactsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ContactsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          CONTACTS_TABLE: !Ref ContactsTable

  getContactApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - getContactFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ContactsRestApi}/${Environment}/GET/contacts/*"
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: put-item.js
  putContactFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the ContactsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ContactsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          CONTACTS_TABLE: !Ref ContactsTable
  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  putContactApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - putContactFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ContactsRestApi}/${Environment}/PUT/contacts"


  postContactFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the ContactsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ContactsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          CONTACTS_TABLE: !Ref ContactsTable
    
  postContactApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - postContactFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ContactsRestApi}/${Environment}/POST/contacts/*"

  deleteContactFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/delete-item.putItemHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP delete method to delete one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the ContactsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ContactsTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          CONTACTS_TABLE: !Ref ContactsTable
    
  deleteContactApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - deleteContactFunction
          - Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Sub: "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ContactsRestApi}/${Environment}/DELETE/contacts/*"


  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  ContactsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: contactId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ContactsRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
